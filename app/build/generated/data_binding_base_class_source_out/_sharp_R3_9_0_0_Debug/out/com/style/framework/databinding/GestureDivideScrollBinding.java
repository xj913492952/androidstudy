// Generated by view binder compiler. Do not edit!
package com.style.framework.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.style.framework.R;
import example.gesture.HorizontalSlideFinishActivityView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class GestureDivideScrollBinding implements ViewBinding {
  @NonNull
  private final HorizontalSlideFinishActivityView rootView;

  @NonNull
  public final NestedScrollView nestedScrollView;

  @NonNull
  public final HorizontalSlideFinishActivityView root;

  @NonNull
  public final TextView tv2;

  @NonNull
  public final TextView tvContent1;

  private GestureDivideScrollBinding(@NonNull HorizontalSlideFinishActivityView rootView,
      @NonNull NestedScrollView nestedScrollView, @NonNull HorizontalSlideFinishActivityView root,
      @NonNull TextView tv2, @NonNull TextView tvContent1) {
    this.rootView = rootView;
    this.nestedScrollView = nestedScrollView;
    this.root = root;
    this.tv2 = tv2;
    this.tvContent1 = tvContent1;
  }

  @Override
  @NonNull
  public HorizontalSlideFinishActivityView getRoot() {
    return rootView;
  }

  @NonNull
  public static GestureDivideScrollBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static GestureDivideScrollBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.gesture_divide_scroll, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static GestureDivideScrollBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.nestedScrollView;
      NestedScrollView nestedScrollView = ViewBindings.findChildViewById(rootView, id);
      if (nestedScrollView == null) {
        break missingId;
      }

      HorizontalSlideFinishActivityView root = (HorizontalSlideFinishActivityView) rootView;

      id = R.id.tv_2;
      TextView tv2 = ViewBindings.findChildViewById(rootView, id);
      if (tv2 == null) {
        break missingId;
      }

      id = R.id.tv_content1;
      TextView tvContent1 = ViewBindings.findChildViewById(rootView, id);
      if (tvContent1 == null) {
        break missingId;
      }

      return new GestureDivideScrollBinding((HorizontalSlideFinishActivityView) rootView,
          nestedScrollView, root, tv2, tvContent1);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
