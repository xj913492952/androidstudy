// Generated by view binder compiler. Do not edit!
package com.style.framework.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.style.framework.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class EditLayoutMainActivityBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final LinearLayout layoutRoot;

  @NonNull
  public final View viewB;

  @NonNull
  public final View viewBottom;

  @NonNull
  public final View viewTop;

  @NonNull
  public final Button viewTransparentColor;

  private EditLayoutMainActivityBinding(@NonNull RelativeLayout rootView,
      @NonNull LinearLayout layoutRoot, @NonNull View viewB, @NonNull View viewBottom,
      @NonNull View viewTop, @NonNull Button viewTransparentColor) {
    this.rootView = rootView;
    this.layoutRoot = layoutRoot;
    this.viewB = viewB;
    this.viewBottom = viewBottom;
    this.viewTop = viewTop;
    this.viewTransparentColor = viewTransparentColor;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static EditLayoutMainActivityBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static EditLayoutMainActivityBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.edit_layout_main_activity, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static EditLayoutMainActivityBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.layout_root;
      LinearLayout layoutRoot = ViewBindings.findChildViewById(rootView, id);
      if (layoutRoot == null) {
        break missingId;
      }

      id = R.id.view_b;
      View viewB = ViewBindings.findChildViewById(rootView, id);
      if (viewB == null) {
        break missingId;
      }

      id = R.id.view_bottom;
      View viewBottom = ViewBindings.findChildViewById(rootView, id);
      if (viewBottom == null) {
        break missingId;
      }

      id = R.id.view_top;
      View viewTop = ViewBindings.findChildViewById(rootView, id);
      if (viewTop == null) {
        break missingId;
      }

      id = R.id.view_transparent_color;
      Button viewTransparentColor = ViewBindings.findChildViewById(rootView, id);
      if (viewTransparentColor == null) {
        break missingId;
      }

      return new EditLayoutMainActivityBinding((RelativeLayout) rootView, layoutRoot, viewB,
          viewBottom, viewTop, viewTransparentColor);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
